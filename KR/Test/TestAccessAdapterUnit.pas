unit TestAccessAdapterUnit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, System.Generics.Collections, AdaptersUnit, SysUtils,
  Data.Win.ADODB,
  AccessAdapterUnit, Data.DB;

type
  // Test methods for class AccessAdapter

  TestAccessAdapter = class(TTestCase)
  strict private
    FAccessAdapter: AccessAdapter;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestgetAnswer;
    procedure TestgetAnswerTableName;
    procedure TestgetAnswerTable;
    procedure TestgetMenu;
    procedure TestsetTest;
    procedure TestgetQuest;
    procedure TestgetQuestTableName;
    procedure TestgetQuestTable;
    procedure TestgetCorrect;
    procedure TestgetCorrectTableName;
    procedure TestgetCorrectTable;
  end;

implementation

procedure TestAccessAdapter.SetUp;
begin
  FAccessAdapter := AccessAdapter.Create;
end;

procedure TestAccessAdapter.TearDown;
begin
  FAccessAdapter.Free;
  FAccessAdapter := nil;
end;

procedure TestAccessAdapter.TestgetAnswer;
var
  ReturnValue: TList<string>;
begin
  FAccessAdapter.setTest('Вопросы по истории России');
  ReturnValue := FAccessAdapter.getAnswer;
  CheckEquals(ReturnValue.Items[4], 'Христианским символом является крест.');
  CheckNotEquals(ReturnValue.Items[1], '+++');
  CheckEquals(ReturnValue.Count, 5);
  CheckNotEquals(ReturnValue.Count, 9);
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestgetAnswerTableName; { + }
var
  ReturnValue: string;
begin
  ReturnValue := FAccessAdapter.getAnswerTableName;
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestgetAnswerTable; { + }
var
  ReturnValue: TList<string>;
  answer: string;
begin
  // TODO: Setup method call parameters
  FAccessAdapter.setTest('Вопросы по истории России');
  answer := FAccessAdapter.getAnswerTableName;
  ReturnValue := FAccessAdapter.getAnswerTable(answer);
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestgetMenu; { + }
var
  ReturnValue: TList<string>;
begin
  ReturnValue := FAccessAdapter.getMenu;
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestsetTest;
var
  caption: string;
begin
  // TODO: Setup method call parameters
  caption := 'Вопросы по истории России';
  FAccessAdapter.setTest(caption);
  CheckEquals(caption, 'Вопросы по истории России');
  CheckNotEquals(caption, '+++');
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestgetQuest;
var
  ReturnValue: TList<string>;
begin
  FAccessAdapter.setTest('Вопросы по истории России');
  ReturnValue := FAccessAdapter.getQuest;
  CheckEquals(ReturnValue.Items[1], 'Какой город стал столицей Древнерусского государства?');
  CheckNotEquals(ReturnValue.Items[0], '+++');
  CheckEquals(ReturnValue.Count, 5);
  CheckNotEquals(ReturnValue.Count, 6);
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestgetQuestTableName; { + }
var
  ReturnValue: string;
begin
  ReturnValue := FAccessAdapter.getQuestTableName;
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestgetQuestTable; { + }
var
  ReturnValue: TList<string>;
  quest: string;
begin
  // TODO: Setup method call parameters
  FAccessAdapter.setTest('Вопросы по истории России');
  quest := FAccessAdapter.getQuestTableName;
  ReturnValue := FAccessAdapter.getQuestTable(quest);
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestgetCorrect;
var
  ReturnValue: TDictionary<integer, integer>;
begin
  FAccessAdapter.setTest('Вопросы по истории России');
  ReturnValue := FAccessAdapter.getCorrect;
  CheckEquals(ReturnValue.Items[4], 4);
  CheckNotEquals(ReturnValue.Items[2], 3);
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestgetCorrectTableName; { + }
var
  ReturnValue: string;
begin
  ReturnValue := FAccessAdapter.getCorrectTableName;
  // TODO: Validate method results
end;

procedure TestAccessAdapter.TestgetCorrectTable; { + }
var
  ReturnValue: TDictionary<integer, integer>;
  correct: string;
begin
  // TODO: Setup method call parameters
  FAccessAdapter.setTest('Вопросы по истории России');
  correct := FAccessAdapter.getCorrectTableName;
  ReturnValue := FAccessAdapter.getCorrectTable(correct);
  // TODO: Validate method results
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestAccessAdapter.Suite);

end.
