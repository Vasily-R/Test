unit TestPhisicsControllerUnit;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, PhisicsControllerUnit, ControllersUnit,
  System.Generics.Collections, MenuUnit, MainUnit, Test1Unit, TestsUnit;

type
  // Test methods for class PhisicsController

  TestPhisicsController = class(TTestCase)
  strict private
    FPhisicsController: Controllers;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetMenu; //
    procedure TestGetAnswer; //
    procedure TestGetQuest; //
    procedure TestSetTest; //
    procedure TestGetCorrect; //
  end;

implementation

procedure TestPhisicsController.TestGetQuest;
var
  ReturnValue: TList<string>;
begin
  FPhisicsController.setTest('Вопросы по истории России');
  ReturnValue := FPhisicsController.GetQuest;
  CheckEquals(ReturnValue.Items[1],
    'Какой город стал столицей Древнерусского государства?');
  CheckNotEquals(ReturnValue.Items[1], '+++');
  CheckEquals(ReturnValue.count, 5);
  CheckNotEquals(ReturnValue.count, 11);
end;

procedure TestPhisicsController.SetUp;
begin
  FPhisicsController := PhisicsController.Create;
end;

procedure TestPhisicsController.TearDown;
begin
  // FPhisicsController.Free;
  FPhisicsController := nil;
end;

procedure TestPhisicsController.TestGetAnswer;
var
  ReturnValue: TList<string>;
  // ReturnValue2: TList<string>;
begin
  FPhisicsController.setTest('Вопросы по истории России');
  // ReturnValue2 := FPhisicsController.GetQuest;
  ReturnValue := FPhisicsController.GetAnswer;
  CheckEquals(ReturnValue.Items[1],
    'В 882 князь Олег захватил Киев и сделал его столицей государства.');
  CheckNotEquals(ReturnValue.Items[1], '+++');
  CheckEquals(ReturnValue.Items[3],
    'При Владимире I Святославовиче, известен также как Владимир Святой, Владимир Великий, в истории церкви — Владимир Креститель.');
  CheckNotEquals(ReturnValue.Items[3], '+++');
  CheckEquals(ReturnValue.count, 5);
  CheckNotEquals(ReturnValue.count, 11);
end;

procedure TestPhisicsController.TestGetCorrect;
var
  ReturnValue: TDictionary<integer, integer>;
begin
  FPhisicsController.setTest('Вопросы по истории России');
  ReturnValue := FPhisicsController.getCorrect;
  CheckEquals(ReturnValue.Items[1], 1);
  CheckEquals(ReturnValue.Items[2], 2);
  CheckNotEquals(ReturnValue.Items[2], 12);
  CheckEquals(ReturnValue.count, 5);
end;

procedure TestPhisicsController.TestGetMenu;
var
  ReturnValue: TList<string>;
begin
  // Menu := TList<string>.Create;
  // CheckEquals (Menu.First,'Test1'); //In the test Error (should be 'test')
  // CheckNotEquals(Menu.First, 'Test2');
  // CheckEquals(Menu.Items[2], 'Test3'); // Another record type
  ReturnValue := FPhisicsController.getMenu;
  CheckEquals(ReturnValue.Items[0], 'Вопросы по истории России');
  CheckNotEquals(ReturnValue.Items[0], '+++');
  CheckEquals(ReturnValue.count, 1);
end;

procedure TestPhisicsController.TestSetTest;
var
  caption: string;
  ReturnValue: TList<string>;
  // ReturnValue2: TList<string>;
begin
  // FPhisicsController.setTest('Движение с постоянным ускорением');
  caption := 'Вопросы по истории России';
  FPhisicsController.setTest(caption);

  ReturnValue := FPhisicsController.GetQuest;
  CheckEquals(ReturnValue.Items[2], 'Когда Русь приняла христианство?');
  CheckNotEquals(ReturnValue.Items[2], '+++');
  CheckEquals(ReturnValue.Items[3],
    'При каком князе произошло крещение Руси?');
  CheckNotEquals(ReturnValue.Items[3], '+++');
  CheckNotEquals(ReturnValue.Items[2], ReturnValue.Items[3]);

end;

initialization

// Register any test cases with the test runner
RegisterTest(TestPhisicsController.Suite);

end.
